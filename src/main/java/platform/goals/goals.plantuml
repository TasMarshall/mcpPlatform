@startuml

title __GOALS's Class Diagram__\n

  package platform {
    package platform.goals {
      class MultiCameraGoal {
          - id : String
          - activated : boolean
          - visualObservationsOfInterest : List<VisualObservationOfInterest>
          - cameras : List<Camera>
          # priority : int
          - requiredCalibrationGoalIds : List<String>
          - motionControllerType : String
          - actionTypes : List<String>
          - cameraBehaviours : List<CameraMAPEBehavior>
          - goalBehaviours : List<GoalMAPEBehavior>
          - processedInfoMap : Map<Camera, Map<String, Object>>
          - newAnalysisResultsMap : Map<String, Map<String, Serializable>>
          - lastAnalysisResultTimes : Map<String, Map<String, Serializable>>
          - motionActionEndTimes : Map<String, Long>
          - additionalFieldMap : Map<String, Object>
          + MultiCameraGoal()
          + init()
          - initOOI()
          + monitorBehaviours()
          + analysisBehaviours()
          + planBehaviours()
          + executeBehaviours()
          + executeCameraMotionAction()
          # addCamerasToGoalsAndGoalsToCameras()
          + getImageAnalysisAlgorithms()
          + getInterestById()
          + getCalibrationGoalIds()
          + setCalibrationGoalIds()
          + getMcp_application()
          + setMcp_application()
          + getObjectsOfInterest()
          + setVisualObservationsOfInterest()
          + getPriority()
          + setPriority()
          + getActiveCameras()
          + setActiveCameras()
          + getMap()
          + setMap()
          + getGoalIndependence()
          + getCameraRequirements()
          + setCameraRequirements()
          + setGoalIndependence()
          + getId()
          + getNewAnalysisResultMap()
          + setAnalysisResultMap()
          + getLatestAnalysisResults()
          + setLatestAnalysisResults()
          + getMotionControllerType()
          + getProcessedInfoMap()
          + setProcessedInfoMap()
          + getActionTypes()
          + isActivated()
          + setActivated()
          + getCameras()
          + setCameras()
          + getGoalBehaviours()
          + getAdditionalFieldMap()
          + setAdditionalFieldMap()
      }
    }
  }
  

  package platform {
    package platform.goals {
      enum GoalIndependence {
        EXCLUSIVE
        NONEXCLUSIVE
      }
    }
  }
  

  package platform {
    package platform.goals {
      enum CameraRequirements {
        VIEW_CONTROL_REQUIRED
        VIEW_CONTROL_OPTIONAL
        PASSIVE
        CALIBRATION
      }
    }
  }
  

  package platform {
    package platform.goals {
      class VisualObservationOfInterest {
          ~ id : String
          ~ analysisAlgorithmsSet : Set<ImageAnalysis>
          ~ results : Map<String, Map<String, Object>>
          + getAnalysisAlgorithmsSet()
          + setAnalysisAlgorithmsSet()
          + init()
          + getResults()
          + getId()
          + setId()
      }
    }
  }
  

  MultiCameraGoal o-- GoalIndependence : goalIndependence
  MultiCameraGoal o-- CameraRequirements : cameraRequirements
  MultiCameraGoal o-- Map : map
  MultiCameraGoal o-- MultiCameraCore : mcp_application
  MultiCameraGoal o-- MotionController : motionController
  MultiCameraGoal +-down- GoalIndependence
  MultiCameraGoal +-down- CameraRequirements


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
